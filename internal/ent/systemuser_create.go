// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rulessly/gin-base/internal/ent/systemuser"
)

// SystemUserCreate is the builder for creating a SystemUser entity.
type SystemUserCreate struct {
	config
	mutation *SystemUserMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (suc *SystemUserCreate) SetCreateTime(t time.Time) *SystemUserCreate {
	suc.mutation.SetCreateTime(t)
	return suc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (suc *SystemUserCreate) SetNillableCreateTime(t *time.Time) *SystemUserCreate {
	if t != nil {
		suc.SetCreateTime(*t)
	}
	return suc
}

// SetUpdateTime sets the "update_time" field.
func (suc *SystemUserCreate) SetUpdateTime(t time.Time) *SystemUserCreate {
	suc.mutation.SetUpdateTime(t)
	return suc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (suc *SystemUserCreate) SetNillableUpdateTime(t *time.Time) *SystemUserCreate {
	if t != nil {
		suc.SetUpdateTime(*t)
	}
	return suc
}

// SetUsername sets the "username" field.
func (suc *SystemUserCreate) SetUsername(s string) *SystemUserCreate {
	suc.mutation.SetUsername(s)
	return suc
}

// SetPassword sets the "password" field.
func (suc *SystemUserCreate) SetPassword(s string) *SystemUserCreate {
	suc.mutation.SetPassword(s)
	return suc
}

// SetNickname sets the "nickname" field.
func (suc *SystemUserCreate) SetNickname(s string) *SystemUserCreate {
	suc.mutation.SetNickname(s)
	return suc
}

// SetRole sets the "role" field.
func (suc *SystemUserCreate) SetRole(i int8) *SystemUserCreate {
	suc.mutation.SetRole(i)
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *SystemUserCreate) SetAvatar(s string) *SystemUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suc *SystemUserCreate) SetNillableAvatar(s *string) *SystemUserCreate {
	if s != nil {
		suc.SetAvatar(*s)
	}
	return suc
}

// SetEmail sets the "email" field.
func (suc *SystemUserCreate) SetEmail(s string) *SystemUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suc *SystemUserCreate) SetNillableEmail(s *string) *SystemUserCreate {
	if s != nil {
		suc.SetEmail(*s)
	}
	return suc
}

// SetPhone sets the "phone" field.
func (suc *SystemUserCreate) SetPhone(s string) *SystemUserCreate {
	suc.mutation.SetPhone(s)
	return suc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suc *SystemUserCreate) SetNillablePhone(s *string) *SystemUserCreate {
	if s != nil {
		suc.SetPhone(*s)
	}
	return suc
}

// SetCreator sets the "creator" field.
func (suc *SystemUserCreate) SetCreator(s string) *SystemUserCreate {
	suc.mutation.SetCreator(s)
	return suc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (suc *SystemUserCreate) SetNillableCreator(s *string) *SystemUserCreate {
	if s != nil {
		suc.SetCreator(*s)
	}
	return suc
}

// Mutation returns the SystemUserMutation object of the builder.
func (suc *SystemUserCreate) Mutation() *SystemUserMutation {
	return suc.mutation
}

// Save creates the SystemUser in the database.
func (suc *SystemUserCreate) Save(ctx context.Context) (*SystemUser, error) {
	suc.defaults()
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SystemUserCreate) SaveX(ctx context.Context) *SystemUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SystemUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SystemUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *SystemUserCreate) defaults() {
	if _, ok := suc.mutation.CreateTime(); !ok {
		v := systemuser.DefaultCreateTime()
		suc.mutation.SetCreateTime(v)
	}
	if _, ok := suc.mutation.UpdateTime(); !ok {
		v := systemuser.DefaultUpdateTime()
		suc.mutation.SetUpdateTime(v)
	}
	if _, ok := suc.mutation.Avatar(); !ok {
		v := systemuser.DefaultAvatar
		suc.mutation.SetAvatar(v)
	}
	if _, ok := suc.mutation.Email(); !ok {
		v := systemuser.DefaultEmail
		suc.mutation.SetEmail(v)
	}
	if _, ok := suc.mutation.Phone(); !ok {
		v := systemuser.DefaultPhone
		suc.mutation.SetPhone(v)
	}
	if _, ok := suc.mutation.Creator(); !ok {
		v := systemuser.DefaultCreator
		suc.mutation.SetCreator(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suc *SystemUserCreate) check() error {
	if _, ok := suc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SystemUser.create_time"`)}
	}
	if _, ok := suc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SystemUser.update_time"`)}
	}
	if _, ok := suc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "SystemUser.username"`)}
	}
	if _, ok := suc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "SystemUser.password"`)}
	}
	if _, ok := suc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "SystemUser.nickname"`)}
	}
	if _, ok := suc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "SystemUser.role"`)}
	}
	return nil
}

func (suc *SystemUserCreate) sqlSave(ctx context.Context) (*SystemUser, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *SystemUserCreate) createSpec() (*SystemUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemUser{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(systemuser.Table, sqlgraph.NewFieldSpec(systemuser.FieldID, field.TypeInt))
	)
	if value, ok := suc.mutation.CreateTime(); ok {
		_spec.SetField(systemuser.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := suc.mutation.UpdateTime(); ok {
		_spec.SetField(systemuser.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := suc.mutation.Username(); ok {
		_spec.SetField(systemuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := suc.mutation.Password(); ok {
		_spec.SetField(systemuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := suc.mutation.Nickname(); ok {
		_spec.SetField(systemuser.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := suc.mutation.Role(); ok {
		_spec.SetField(systemuser.FieldRole, field.TypeInt8, value)
		_node.Role = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.SetField(systemuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.SetField(systemuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := suc.mutation.Phone(); ok {
		_spec.SetField(systemuser.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := suc.mutation.Creator(); ok {
		_spec.SetField(systemuser.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	return _node, _spec
}

// SystemUserCreateBulk is the builder for creating many SystemUser entities in bulk.
type SystemUserCreateBulk struct {
	config
	err      error
	builders []*SystemUserCreate
}

// Save creates the SystemUser entities in the database.
func (sucb *SystemUserCreateBulk) Save(ctx context.Context) ([]*SystemUser, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SystemUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SystemUserCreateBulk) SaveX(ctx context.Context) []*SystemUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SystemUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SystemUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}
