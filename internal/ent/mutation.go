// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rulessly/gin-base/internal/ent/predicate"
	"github.com/rulessly/gin-base/internal/ent/systemuser"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSystemUser = "SystemUser"
)

// SystemUserMutation represents an operation that mutates the SystemUser nodes in the graph.
type SystemUserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	username      *string
	password      *string
	nickname      *string
	role          *int8
	addrole       *int8
	avatar        *string
	email         *string
	phone         *string
	creator       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SystemUser, error)
	predicates    []predicate.SystemUser
}

var _ ent.Mutation = (*SystemUserMutation)(nil)

// systemuserOption allows management of the mutation configuration using functional options.
type systemuserOption func(*SystemUserMutation)

// newSystemUserMutation creates new mutation for the SystemUser entity.
func newSystemUserMutation(c config, op Op, opts ...systemuserOption) *SystemUserMutation {
	m := &SystemUserMutation{
		config:        c,
		op:            op,
		typ:           TypeSystemUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSystemUserID sets the ID field of the mutation.
func withSystemUserID(id int) systemuserOption {
	return func(m *SystemUserMutation) {
		var (
			err   error
			once  sync.Once
			value *SystemUser
		)
		m.oldValue = func(ctx context.Context) (*SystemUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SystemUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSystemUser sets the old SystemUser of the mutation.
func withSystemUser(node *SystemUser) systemuserOption {
	return func(m *SystemUserMutation) {
		m.oldValue = func(context.Context) (*SystemUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SystemUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SystemUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SystemUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SystemUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SystemUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *SystemUserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SystemUserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SystemUserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SystemUserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SystemUserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SystemUserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUsername sets the "username" field.
func (m *SystemUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *SystemUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *SystemUserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *SystemUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *SystemUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *SystemUserMutation) ResetPassword() {
	m.password = nil
}

// SetNickname sets the "nickname" field.
func (m *SystemUserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *SystemUserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *SystemUserMutation) ResetNickname() {
	m.nickname = nil
}

// SetRole sets the "role" field.
func (m *SystemUserMutation) SetRole(i int8) {
	m.role = &i
	m.addrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *SystemUserMutation) Role() (r int8, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldRole(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// AddRole adds i to the "role" field.
func (m *SystemUserMutation) AddRole(i int8) {
	if m.addrole != nil {
		*m.addrole += i
	} else {
		m.addrole = &i
	}
}

// AddedRole returns the value that was added to the "role" field in this mutation.
func (m *SystemUserMutation) AddedRole() (r int8, exists bool) {
	v := m.addrole
	if v == nil {
		return
	}
	return *v, true
}

// ResetRole resets all changes to the "role" field.
func (m *SystemUserMutation) ResetRole() {
	m.role = nil
	m.addrole = nil
}

// SetAvatar sets the "avatar" field.
func (m *SystemUserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *SystemUserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *SystemUserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[systemuser.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *SystemUserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *SystemUserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, systemuser.FieldAvatar)
}

// SetEmail sets the "email" field.
func (m *SystemUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SystemUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *SystemUserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[systemuser.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *SystemUserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *SystemUserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, systemuser.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *SystemUserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *SystemUserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *SystemUserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[systemuser.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *SystemUserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *SystemUserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, systemuser.FieldPhone)
}

// SetCreator sets the "creator" field.
func (m *SystemUserMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *SystemUserMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldCreator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *SystemUserMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[systemuser.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *SystemUserMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *SystemUserMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, systemuser.FieldCreator)
}

// Where appends a list predicates to the SystemUserMutation builder.
func (m *SystemUserMutation) Where(ps ...predicate.SystemUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SystemUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SystemUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SystemUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SystemUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SystemUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SystemUser).
func (m *SystemUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SystemUserMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, systemuser.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, systemuser.FieldUpdateTime)
	}
	if m.username != nil {
		fields = append(fields, systemuser.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, systemuser.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, systemuser.FieldNickname)
	}
	if m.role != nil {
		fields = append(fields, systemuser.FieldRole)
	}
	if m.avatar != nil {
		fields = append(fields, systemuser.FieldAvatar)
	}
	if m.email != nil {
		fields = append(fields, systemuser.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, systemuser.FieldPhone)
	}
	if m.creator != nil {
		fields = append(fields, systemuser.FieldCreator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SystemUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case systemuser.FieldCreateTime:
		return m.CreateTime()
	case systemuser.FieldUpdateTime:
		return m.UpdateTime()
	case systemuser.FieldUsername:
		return m.Username()
	case systemuser.FieldPassword:
		return m.Password()
	case systemuser.FieldNickname:
		return m.Nickname()
	case systemuser.FieldRole:
		return m.Role()
	case systemuser.FieldAvatar:
		return m.Avatar()
	case systemuser.FieldEmail:
		return m.Email()
	case systemuser.FieldPhone:
		return m.Phone()
	case systemuser.FieldCreator:
		return m.Creator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SystemUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case systemuser.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case systemuser.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case systemuser.FieldUsername:
		return m.OldUsername(ctx)
	case systemuser.FieldPassword:
		return m.OldPassword(ctx)
	case systemuser.FieldNickname:
		return m.OldNickname(ctx)
	case systemuser.FieldRole:
		return m.OldRole(ctx)
	case systemuser.FieldAvatar:
		return m.OldAvatar(ctx)
	case systemuser.FieldEmail:
		return m.OldEmail(ctx)
	case systemuser.FieldPhone:
		return m.OldPhone(ctx)
	case systemuser.FieldCreator:
		return m.OldCreator(ctx)
	}
	return nil, fmt.Errorf("unknown SystemUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SystemUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case systemuser.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case systemuser.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case systemuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case systemuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case systemuser.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case systemuser.FieldRole:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case systemuser.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case systemuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case systemuser.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case systemuser.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	}
	return fmt.Errorf("unknown SystemUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SystemUserMutation) AddedFields() []string {
	var fields []string
	if m.addrole != nil {
		fields = append(fields, systemuser.FieldRole)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SystemUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case systemuser.FieldRole:
		return m.AddedRole()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SystemUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case systemuser.FieldRole:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRole(v)
		return nil
	}
	return fmt.Errorf("unknown SystemUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SystemUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(systemuser.FieldAvatar) {
		fields = append(fields, systemuser.FieldAvatar)
	}
	if m.FieldCleared(systemuser.FieldEmail) {
		fields = append(fields, systemuser.FieldEmail)
	}
	if m.FieldCleared(systemuser.FieldPhone) {
		fields = append(fields, systemuser.FieldPhone)
	}
	if m.FieldCleared(systemuser.FieldCreator) {
		fields = append(fields, systemuser.FieldCreator)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SystemUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SystemUserMutation) ClearField(name string) error {
	switch name {
	case systemuser.FieldAvatar:
		m.ClearAvatar()
		return nil
	case systemuser.FieldEmail:
		m.ClearEmail()
		return nil
	case systemuser.FieldPhone:
		m.ClearPhone()
		return nil
	case systemuser.FieldCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown SystemUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SystemUserMutation) ResetField(name string) error {
	switch name {
	case systemuser.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case systemuser.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case systemuser.FieldUsername:
		m.ResetUsername()
		return nil
	case systemuser.FieldPassword:
		m.ResetPassword()
		return nil
	case systemuser.FieldNickname:
		m.ResetNickname()
		return nil
	case systemuser.FieldRole:
		m.ResetRole()
		return nil
	case systemuser.FieldAvatar:
		m.ResetAvatar()
		return nil
	case systemuser.FieldEmail:
		m.ResetEmail()
		return nil
	case systemuser.FieldPhone:
		m.ResetPhone()
		return nil
	case systemuser.FieldCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown SystemUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SystemUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SystemUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SystemUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SystemUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SystemUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SystemUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SystemUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SystemUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SystemUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SystemUser edge %s", name)
}
