// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rulessly/gin-base/internal/ent/systemuser"
)

// SystemUser is the model entity for the SystemUser schema.
type SystemUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 用户名
	Username string `json:"username,omitempty"`
	// 密码
	Password string `json:"password,omitempty"`
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// 权限
	Role int8 `json:"role,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 手机号
	Phone string `json:"phone,omitempty"`
	// 创建者
	Creator      string `json:"creator,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemuser.FieldID, systemuser.FieldRole:
			values[i] = new(sql.NullInt64)
		case systemuser.FieldUsername, systemuser.FieldPassword, systemuser.FieldNickname, systemuser.FieldAvatar, systemuser.FieldEmail, systemuser.FieldPhone, systemuser.FieldCreator:
			values[i] = new(sql.NullString)
		case systemuser.FieldCreateTime, systemuser.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemUser fields.
func (su *SystemUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = int(value.Int64)
		case systemuser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				su.CreateTime = value.Time
			}
		case systemuser.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				su.UpdateTime = value.Time
			}
		case systemuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				su.Username = value.String
			}
		case systemuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				su.Password = value.String
			}
		case systemuser.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				su.Nickname = value.String
			}
		case systemuser.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				su.Role = int8(value.Int64)
			}
		case systemuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = value.String
			}
		case systemuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				su.Email = value.String
			}
		case systemuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				su.Phone = value.String
			}
		case systemuser.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				su.Creator = value.String
			}
		default:
			su.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemUser.
// This includes values selected through modifiers, order, etc.
func (su *SystemUser) Value(name string) (ent.Value, error) {
	return su.selectValues.Get(name)
}

// Update returns a builder for updating this SystemUser.
// Note that you need to call SystemUser.Unwrap() before calling this method if this SystemUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SystemUser) Update() *SystemUserUpdateOne {
	return NewSystemUserClient(su.config).UpdateOne(su)
}

// Unwrap unwraps the SystemUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SystemUser) Unwrap() *SystemUser {
	_tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemUser is not a transactional entity")
	}
	su.config.driver = _tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SystemUser) String() string {
	var builder strings.Builder
	builder.WriteString("SystemUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", su.ID))
	builder.WriteString("create_time=")
	builder.WriteString(su.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(su.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(su.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(su.Password)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(su.Nickname)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", su.Role))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(su.Avatar)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(su.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(su.Phone)
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(su.Creator)
	builder.WriteByte(')')
	return builder.String()
}

// SystemUsers is a parsable slice of SystemUser.
type SystemUsers []*SystemUser
